<?php

declare(strict_types=1);

namespace App\Controller\Admin;

use App\Model\System\Config;
use App\Request\Admin\ConfigRequest;
use Hyperf\Di\Annotation\Inject;
use Psr\Http\Message\ResponseInterface;

class Configs extends BaseController
{
    // 设定模型
    protected $model = Config::class;

    /**
     * 验证器
     *
     * @Inject
     * @var ConfigRequest
     */
    protected $validator;

    protected function setSearchWhereFilter(&$model, array $params = []) : void
    {
        if ( isset($params['search']) && !empty($params['search']) ) {
            $model->where(function($query) use ($params) {
                $query->where('config_title', 'like', "%{$params['search']}%")
                      ->orWhere('config_name', 'like', "%{$params['search']}%");
            });
        }
        if ( isset($params['config_type']) && !empty($params['config_type']) && $params['config_type'] > -1 ) {
            $model->where('config_type', $params['config_type']);
        }
        if ( isset($params['config_group']) && !empty($params['config_group']) && $params['config_group'] > -1 ) {
            $model->where('config_group', $params['config_group']);
        }
        if ( isset($params['is_check']) && !empty($params['is_check']) && $params['is_check'] > -1 ) {
            $model->where('is_check', $params['is_check']);
        }
        parent::setSearchWhereFilter($model, $params); // TODO: Change the autogenerated stub
    }

    /**
     * 同步配置到配置文件
     *
     * @return \Psr\Http\Message\ResponseInterface
     */
    public function pushRefreshConfig(): ResponseInterface
    {
        $this->modelInstance->pushRefreshConfig();
        return $this->success([], '配置文件已同步成功！');
    }
}
